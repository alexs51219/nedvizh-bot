# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_forms = {}

# –°—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã
@app.on_message(filters.regex("üè† –•–æ—á—É –∫—É–ø–∏—Ç—å"))
async def start_buy_form(client, message):
    user_id = message.from_user.id
    user_forms[user_id] = {"stage": "property_type"}

    await message.reply(
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? üè†\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úèÔ∏è",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–í—Ç–æ—Ä–∏—á–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å)", "–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞)"],
                ["–î–æ–º", "–î–∞—á–∞"],
                ["–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫", "–î—Ä—É–≥–æ–µ"]
            ],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message(filters.text & ~filters.command("start"))
async def handle_form(client, message):
    user_id = message.from_user.id

    if user_id not in user_forms:
        return

    stage = user_forms[user_id]["stage"]
    text = message.text

    if stage == "property_type":
        user_forms[user_id]["property_type"] = text

        if text == "–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞)":
            user_forms[user_id]["stage"] = "apartment_type_new"

            await message.reply(
                "–ö–∞–∫–æ–π —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üè¢ (–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞)\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úèÔ∏è",
                reply_markup=ReplyKeyboardMarkup(
                    [
                        ["–°—Ç—É–¥–∏—è", "1–∫ (–ï-2)"],
                        ["2–∫ (–ï-3)", "3–∫ (–ï-4)"],
                        ["4–∫ –∏ –±–æ–ª–µ–µ", "–î—Ä—É–≥–æ–µ"]
                    ],
                    resize_keyboard=True
                )
            )

        elif text == "–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–í—Ç–æ—Ä–∏—á–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å)":
            user_forms[user_id]["stage"] = "apartment_type_secondary"

            await message.reply(
                "–ö–∞–∫–æ–π —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üè¢ (–í—Ç–æ—Ä–∏—á–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å)\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úèÔ∏è",
                reply_markup=ReplyKeyboardMarkup(
                    [
                        ["1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è"],
                        ["3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è"],
                        ["–î—Ä—É–≥–æ–µ"]
                    ],
                    resize_keyboard=True
                )
            )

        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –î–æ–º, –î–∞—á—É –∏–ª–∏ –£—á–∞—Å—Ç–æ–∫ ‚Äî –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∞—Ü–∏—è
            user_forms[user_id]["stage"] = "done"
            await message.reply("–û—Ç–ª–∏—á–Ω–æ! üìù (–°–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.)")

    elif stage in ["apartment_type_new", "apartment_type_secondary"]:
        user_forms[user_id]["apartment_type"] = text

        await message.reply("–û—Ç–ª–∏—á–Ω–æ! üìù (–°–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.)")
