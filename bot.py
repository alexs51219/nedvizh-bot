import asyncio
from pyrogram import Client, filters
from pyrogram.types import ReplyKeyboardMarkup, Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_ID = 12345678  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API_ID
API_HASH = "your_api_hash_here"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π API_HASH
BOT_TOKEN = "your_bot_token_here"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π BOT_TOKEN
ADMIN_ID = 805696670  # ‚Üê —Ç–≤–æ–π Telegram ID

app = Client("nedvizh_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
scheduler = AsyncIOScheduler()

# --- –ö–æ–º–∞–Ω–¥—ã ---

# –°—Ç–∞—Ä—Ç
@app.on_message(filters.command("start"))
async def start(client, message: Message):
    keyboard = ReplyKeyboardMarkup(
        [["üè† –•–æ—á—É –∫—É–ø–∏—Ç—å", "üì§ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å"],
         ["‚ÑπÔ∏è –û–±–æ –º–Ω–µ"]],
        resize_keyboard=True
    )
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç ¬´–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¢—É–ª—ã 24/7¬ª!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=keyboard
    )

# –û–±–æ –º–Ω–µ
@app.on_message(filters.text(["‚ÑπÔ∏è –û–±–æ –º–Ω–µ"]))
async def about(client, message: Message):
    await message.reply(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –¢—É–ª–µ.\n"
        "üè° –ö–≤–∞—Ä—Ç–∏—Ä—ã, –¥–æ–º–∞, —É—á–∞—Å—Ç–∫–∏\n"
        "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞—è–≤–∫–∏."
    )

# –•–æ—á—É –∫—É–ø–∏—Ç—å
@app.on_message(filters.text("üè† –•–æ—á—É –∫—É–ø–∏—Ç—å"))
async def want_to_buy(client, message: Message):
    keyboard = ReplyKeyboardMarkup(
        [["üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞ (–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞)", "üèòÔ∏è –ö–≤–∞—Ä—Ç–∏—Ä–∞ (–í—Ç–æ—Ä–∏—á–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å)"],
         ["üè° –î–æ–º", "üå≥ –£—á–∞—Å—Ç–æ–∫/–î–∞—á–∞"],
         ["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]],
        resize_keyboard=True
    )
    await message.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", reply_markup=keyboard)

# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@app.on_message(filters.text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
async def back_to_menu(client, message: Message):
    keyboard = ReplyKeyboardMarkup(
        [["üè† –•–æ—á—É –∫—É–ø–∏—Ç—å", "üì§ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å"],
         ["‚ÑπÔ∏è –û–±–æ –º–Ω–µ"]],
        resize_keyboard=True
    )
    await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

# –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞
@app.on_message(filters.text("üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞ (–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞)"))
async def new_building(client, message: Message):
    keyboard = ReplyKeyboardMarkup(
        [["–°—Ç—É–¥–∏—è", "1–∫ (–ï-2)", "2–∫ (–ï-3)", "3–∫ (–ï-4)", "–î—Ä—É–≥–æ–µ"],
         ["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]],
        resize_keyboard=True
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã (–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞):", reply_markup=keyboard)

# –í—Ç–æ—Ä–∏—á–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
@app.on_message(filters.text("üèòÔ∏è –ö–≤–∞—Ä—Ç–∏—Ä–∞ (–í—Ç–æ—Ä–∏—á–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å)"))
async def secondary(client, message: Message):
    keyboard = ReplyKeyboardMarkup(
        [["1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "5-–∫–æ–º–Ω–∞—Ç–Ω–∞—è"],
         ["–î—Ä—É–≥–æ–µ", "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]],
        resize_keyboard=True
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã (–í—Ç–æ—Ä–∏—á–∫–∞):", reply_markup=keyboard)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ç—Ä–æ–º
async def morning_report():
    now = datetime.now()
    if now.time() >= time(8, 0):
        await app.send_message(ADMIN_ID, "‚òÄÔ∏è –ë–æ—Ç –ø—Ä–æ—Å–Ω—É–ª—Å—è. –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –∑–∞—è–≤–æ–∫!")

# –ó–∞–ø—É—Å–∫
async def main():
    scheduler.add_job(morning_report, "cron", hour=8, minute=0)
    scheduler.start()
    await app.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.get_event_loop().create_future()  # –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

if __name__ == "__main__":
    asyncio.run(main())
