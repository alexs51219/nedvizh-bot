import asyncio
from pyrogram import Client, filters
from pyrogram.types import ReplyKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import pytz
import os

# –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
API_ID = 28155507
API_HASH = "cce39d7743018b7c5b2047757ce85eee"
BOT_TOKEN = "7949703718:AAH43G5ZyQ_vDxRD3LG6sUFz09rOPkfvXGA"
ADMIN_ID = 805696670

# –í—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
app = Client(
    "nedvizh_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    [
        ["üè† –•–æ—á—É –∫—É–ø–∏—Ç—å"],
        ["üì§ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å"],
        ["‚ÑπÔ∏è –û–±–æ –º–Ω–µ"]
    ],
    resize_keyboard=True
)

# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
WELCOME_TEXT = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –±—Ä–æ–∫–µ—Ä–∞ (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏) –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –°—É—Å–ª–æ–≤–∞ "
    "¬´–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¢—É–ª—ã 24/7¬ª!\n\n"
    "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é –¢—É–ª—ã.\n"
    "–í—ã –º–µ—á—Ç–∞–µ—Ç–µ ‚Äî –Ø –≤–æ–ø–ª–æ—â–∞—é! üí´"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ—á–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —É—Ç—Ä–æ–º
async def send_night_contacts():
    contacts_file = "night_contacts.txt"

    if os.path.exists(contacts_file):
        with open(contacts_file, "r", encoding="utf-8") as file:
            contacts = file.read()

        if contacts.strip():
            await app.send_message(
                ADMIN_ID,
                f"üåô –ù–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n{contacts}"
            )
        else:
            await app.send_message(
                ADMIN_ID,
                "üåô –ù–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –±—ã–ª–æ."
            )

        with open(contacts_file, "w", encoding="utf-8") as file:
            file.write("")
    else:
        await app.send_message(
            ADMIN_ID,
            "üåô –§–∞–π–ª –Ω–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )

# –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–¥–∞—á–∞
async def morning_tasks():
    await send_night_contacts()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç—ã
scheduler = AsyncIOScheduler()

def start_scheduler():
    now = datetime.now(TIMEZONE)
    current_hour = now.hour

    if 8 <= current_hour < 22:
        scheduler.add_job(send_reminders, "interval", minutes=120)
    else:
        scheduler.add_job(sleep_mode, "interval", minutes=5)

    scheduler.start()

async def send_reminders():
    pass

async def sleep_mode():
    pass

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_forms = {}

# –°—Ç–∞—Ä—Ç –∞–Ω–∫–µ—Ç—ã
@app.on_message(filters.regex("üè† –•–æ—á—É –∫—É–ø–∏—Ç—å"))
async def start_buy_form(client, message):
    user_id = message.from_user.id
    user_forms[user_id] = {"stage": "property_type"}

    await message.reply(
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å? üè†\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úèÔ∏è",
        reply_markup=ReplyKeyboardMarkup(
            [
                ["–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–í—Ç–æ—Ä–∏—á–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å)", "–ö–≤–∞—Ä—Ç–∏—Ä–∞ (–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞)"],
                ["–î–æ–º", "–î–∞—á–∞"],
                ["–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫", "–î—Ä—É–≥–æ–µ"]
            ],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message(filters.text & ~filters.command("start"))
async def handle_form(client, message):
    user_id = message.from_user.id

    if user_id not in user_forms:
        return

    stage = user_forms[user_id]["stage"]
    text = message.text

    if stage == "property_type":
        user_forms[user_id]["property_type"] = text
        user_forms[user_id]["stage"] = "apartment_type"

        await message.reply(
            "–ö–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üè¢\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úèÔ∏è",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["–°—Ç—É–¥–∏—è", "1–∫ (–ï-2)"],
                    ["2–∫ (–ï-3)", "3–∫ (–ï-4)"],
                    ["4–∫ –∏ –±–æ–ª–µ–µ", "–î—Ä—É–≥–æ–µ"]
                ],
                resize_keyboard=True
            )
        )

    elif stage == "apartment_type":
        user_forms[user_id]["apartment_type"] = text

        await message.reply("–û—Ç–ª–∏—á–Ω–æ! üìù (–°–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
@app.on_message(filters.command("start"))
async def start(client, message):
    await message.reply(WELCOME_TEXT, reply_markup=menu)
    await morning_tasks()

@app.on_message(filters.regex("üì§ –•–æ—á—É –ø—Ä–æ–¥–∞—Ç—å"))
async def sell(client, message):
    await message.reply("üì§ –û—Ç–ª–∏—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ—ë–º –æ–±—ä–µ–∫—Ç–µ.\n(–ê–Ω–∫–µ—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!)")

@app.on_message(filters.regex("‚ÑπÔ∏è –û–±–æ –º–Ω–µ"))
async def about(client, message):
    await message.reply(
        "üîó –í–æ—Ç –º–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\nhttps://tapy.me/upfyk8",
        disable_web_page_preview=False
    )

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app.run()
